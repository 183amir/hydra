(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{270:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return f}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),u=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=u(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=u(t),p=a,f=b["".concat(c,".").concat(p)]||b[p]||d[p]||o;return t?r.a.createElement(f,i(i({ref:n},s),{},{components:t})):r.a.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<o;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},271:function(e,n,t){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}t.d(n,"b",(function(){return a})),t.d(n,"a",(function(){return r}))},272:function(e,n,t){"use strict";var a=t(0),r=t.n(a),o=t(11),c=t(271),i=t(7),l=Object(a.createContext)({collectLink:function(){}}),s=t(273),u=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)n.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(t[a[r]]=e[a[r]])}return t};n.a=function(e){var n,t,b,d=e.isNavLink,p=e.to,f=e.href,m=e.activeClassName,g=e.isActive,v=e["data-noBrokenLinkCheck"],y=e.autoAddBaseUrl,h=void 0===y||y,j=u(e,["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"]),O=Object(s.b)().withBaseUrl,k=Object(a.useContext)(l),_=p||f,C=Object(c.a)(_),w=null==_?void 0:_.replace("pathname://",""),N=void 0!==w?(t=w,h&&function(e){return e.startsWith("/")}(t)?O(t):t):void 0,D=Object(a.useRef)(!1),A=d?o.e:o.c,x=i.default.canUseIntersectionObserver;Object(a.useEffect)((function(){return!x&&C&&window.docusaurus.prefetch(N),function(){x&&b&&b.disconnect()}}),[N,x,C]);var P=null!==(n=null==N?void 0:N.startsWith("#"))&&void 0!==n&&n,V=!N||!C||P;return N&&C&&!P&&!v&&k.collectLink(N),V?r.a.createElement("a",Object.assign({href:N},_&&!C&&{target:"_blank",rel:"noopener noreferrer"},j)):r.a.createElement(A,Object.assign({},j,{onMouseEnter:function(){D.current||(window.docusaurus.preload(N),D.current=!0)},innerRef:function(e){var n,t;x&&e&&C&&(n=e,t=function(){window.docusaurus.prefetch(N)},(b=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(b.unobserve(n),b.disconnect(),t())}))}))).observe(n))},to:N||""},d&&{isActive:g,activeClassName:m}))}},273:function(e,n,t){"use strict";t.d(n,"b",(function(){return o})),t.d(n,"a",(function(){return c}));var a=t(10),r=t(271);function o(){var e=Object(a.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,o=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,a){var o=void 0===a?{}:a,c=o.forcePrependBaseUrl,i=void 0!==c&&c,l=o.absolute,s=void 0!==l&&l;if(!t)return t;if(t.startsWith("#"))return t;if(Object(r.b)(t))return t;if(i)return n+t;var u=t.startsWith(n)?t:n+t.replace(/^\//,"");return s?e+u:u}(o,t,e,n)}}}function c(e,n){return void 0===n&&(n={}),(0,o().withBaseUrl)(e,n)}},274:function(e,n,t){try{e.exports=t(275)}catch(r){var a={};e.exports={useAllDocsData:function(){return a},useActivePluginAndVersion:function(){}}}},275:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.useDocVersionSuggestions=n.useActiveDocContext=n.useActiveVersion=n.useLatestVersion=n.useVersions=n.useActivePluginAndVersion=n.useActivePlugin=n.useDocsData=n.useAllDocsData=void 0;var a=t(23),r=t(38),o=t(276);n.useAllDocsData=function(){return r.useAllPluginInstancesData("docusaurus-plugin-content-docs")},n.useDocsData=function(e){return r.usePluginData("docusaurus-plugin-content-docs",e)},n.useActivePlugin=function(e){void 0===e&&(e={});var t=n.useAllDocsData(),r=a.useLocation().pathname;return o.getActivePlugin(t,r,e)},n.useActivePluginAndVersion=function(e){void 0===e&&(e={});var t=n.useActivePlugin(e),r=a.useLocation().pathname;if(t)return{activePlugin:t,activeVersion:o.getActiveVersion(t.pluginData,r)}},n.useVersions=function(e){return n.useDocsData(e).versions},n.useLatestVersion=function(e){var t=n.useDocsData(e);return o.getLatestVersion(t)},n.useActiveVersion=function(e){var t=n.useDocsData(e),r=a.useLocation().pathname;return o.getActiveVersion(t,r)},n.useActiveDocContext=function(e){var t=n.useDocsData(e),r=a.useLocation().pathname;return o.getActiveDocContext(t,r)},n.useDocVersionSuggestions=function(e){var t=n.useDocsData(e),r=a.useLocation().pathname;return o.getDocVersionSuggestions(t,r)}},276:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getDocVersionSuggestions=n.getActiveDocContext=n.getActiveVersion=n.getLatestVersion=n.getActivePlugin=void 0;var a=t(23);n.getActivePlugin=function(e,n,t){void 0===t&&(t={});var r=Object.entries(e).find((function(e){e[0];var t=e[1];return!!a.matchPath(n,{path:t.path,exact:!1,strict:!1})})),o=r?{pluginId:r[0],pluginData:r[1]}:void 0;if(!o&&t.failfast)throw new Error("Can't find active docs plugin for pathname="+n+", while it was expected to be found. Maybe you tried to use a docs feature that can only be used on a docs-related page? Existing docs plugin paths are: "+Object.values(e).map((function(e){return e.path})).join(", "));return o},n.getLatestVersion=function(e){return e.versions.find((function(e){return e.isLast}))},n.getActiveVersion=function(e,t){var r=n.getLatestVersion(e);return[].concat(e.versions.filter((function(e){return e!==r})),[r]).find((function(e){return!!a.matchPath(t,{path:e.path,exact:!1,strict:!1})}))},n.getActiveDocContext=function(e,t){var r,o,c=n.getActiveVersion(e,t),i=null==c?void 0:c.docs.find((function(e){return!!a.matchPath(t,{path:e.path,exact:!0,strict:!1})}));return{activeVersion:c,activeDoc:i,alternateDocVersions:i?(r=i.id,o={},e.versions.forEach((function(e){e.docs.forEach((function(n){n.id===r&&(o[e.name]=n)}))})),o):{}}},n.getDocVersionSuggestions=function(e,t){var a=n.getLatestVersion(e),r=n.getActiveDocContext(e,t),o=r.activeVersion!==a;return{latestDocSuggestion:o?null==r?void 0:r.alternateDocVersions[a.name]:void 0,latestVersionSuggestion:o?a:void 0}}},277:function(e,n,t){"use strict";t.d(n,"b",(function(){return s})),t.d(n,"a",(function(){return u}));var a=t(3),r=t(0),o=t.n(r),c=t(272),i=t(10),l=t(274);function s(e){return o.a.createElement(c.a,Object(a.a)({},e,{to:(n=e.to,r=Object(l.useActiveVersion)(),Object(i.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[null!==(t=null==r?void 0:r.name)&&void 0!==t?t:"current"]+n),target:"_blank"}));var n,t,r}function u(e){var n,t=null!==(n=e.text)&&void 0!==n?n:"Example";return o.a.createElement(s,e,o.a.createElement("span",null,"\xa0"),o.a.createElement("img",{src:"https://img.shields.io/badge/-"+t+"-informational",alt:"Example"}))}},92:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(8),o=(t(0),t(270)),c=t(277),i={id:"callbacks",title:"Callbacks",sidebar_label:"Callbacks"},l={unversionedId:"experimental/callbacks",id:"experimental/callbacks",isDocsHomePage:!1,title:"Callbacks",description:"The Callback interface enables custom",source:"@site/docs/experimental/callbacks.md",slug:"/experimental/callbacks",permalink:"/docs/next/experimental/callbacks",editUrl:"https://github.com/facebookresearch/hydra/edit/master/website/docs/experimental/callbacks.md",version:"current",lastUpdatedBy:"Jasha10",lastUpdatedAt:1622831009,formattedLastUpdatedAt:"6/4/2021",sidebar_label:"Callbacks",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/next/experimental/intro"},next:{title:"Developer Guide Overview",permalink:"/docs/next/development/overview"}},s=[{value:"Configure Callback",id:"configure-callback",children:[]},{value:"Callback ordering",id:"callback-ordering",children:[]}],u={toc:s};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)(c.b,{to:"hydra/experimental/callback.py",mdxType:"GithubLink"},"Callback interface")," enables custom\ncode to be triggered by various Hydra events."),Object(o.b)("p",null,"To use the callback API, one should import Hydra's ",Object(o.b)("inlineCode",{parentName:"p"},"Callback")," class:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from hydra.experimental.callback import Callback\n")),Object(o.b)("p",null,"Users can then create subclasses of this ",Object(o.b)("inlineCode",{parentName:"p"},"Callback")," class, overriding one or more of\nthe methods defined by ",Object(o.b)("inlineCode",{parentName:"p"},"Callback"),". For the methods of a subclass to be called at the\nappropriate time, the subclass must be registered with Hydra in the ",Object(o.b)("inlineCode",{parentName:"p"},"hydra.callbacks")," config\n(see examples below)."),Object(o.b)("p",null,"The full API exposed by the ",Object(o.b)("inlineCode",{parentName:"p"},"hydra.experimental.callback.Callback")," class is listed below:"),Object(o.b)("details",null,Object(o.b)("summary",null,"Events supported (Click to expand)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'class Callback:\n    def on_run_start(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in RUN mode before job starts.\n        """\n        ...\n\n    def on_run_end(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in RUN mode after job ends.\n        """\n        ...\n\n    def on_multirun_start(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in MULTIRUN mode before any job starts.\n        """\n        ...\n\n    def on_multirun_end(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in MULTIRUN mode after all jobs end.\n        """\n        ...\n\n    def on_job_start(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in both RUN and MULTIRUN modes, once for each Hydra job (before running\n        application code).\n        """\n        ...\n\n    def on_job_end(\n        self, config: DictConfig, job_return: JobReturn, **kwargs: Any\n    ) -> None:\n        """\n        Called in both RUN and MULTIRUN modes, once for each Hydra job (after running\n        application code).\n        """\n        ...\n\n'))),Object(o.b)("h3",{id:"configure-callback"},"Configure Callback"),Object(o.b)("p",null,"Say we have ",Object(o.b)("inlineCode",{parentName:"p"},"MyCallback")," so after every job ends we can upload a certain file to a S3 bucket.\nFor simplicity we include this Callback class within the application, in real life you should have the\nCallback in a separate file.\nRunning the application, we can see our custom method ",Object(o.b)("inlineCode",{parentName:"p"},"on_job_end")," was called."),Object(o.b)("div",{className:"row"},Object(o.b)("div",{className:"col col--9"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python",metastring:'title="my_app.py"',title:'"my_app.py"'},'class MyCallback(Callback):\n   def __init__(self, bucket: str, file_path: str) -> None:\n        self.bucket = bucket\n        self.file_path = file_path\n\n   def on_job_end(self, config: DictConfig, **kwargs: Any) -> None:\n        print(f"Job ended,uploading...")\n        # uploading...\n\n@hydra.main(config_path="conf", config_name="config")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == "__main__":\n    my_app()\n'))),Object(o.b)("div",{className:"col col--3"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-commandline",metastring:'title="output"',title:'"output"'},"\n$ python  my_app.py\nfoo: bar\n\nJob ended,uploading...\n\n\n\n\n\n\n\n\n\n\n\n")))),Object(o.b)("p",null,"Now let's take a look at the configurations. "),Object(o.b)("div",{className:"row"},Object(o.b)("div",{className:"col col--4"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-commandline",metastring:'title="$ tree conf"',title:'"$',tree:!0,'conf"':!0},"conf\n\u251c\u2500\u2500 config.yaml\n\u2514\u2500\u2500 hydra\n    \u2514\u2500\u2500 callbacks\n        \u2514\u2500\u2500 my_callback.yaml\n\n\n"))),Object(o.b)("div",{className:"col  col--3"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-commandline",metastring:'title="conf/config.yaml"',title:'"conf/config.yaml"'},"defaults:\n - /hydra/callbacks:\n    - my_callback\n\nfoo: bar\n\n\n"))),Object(o.b)("div",{className:"col  col--5"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-commandline",metastring:'title="conf/hydra/callbacks/my_callback.yaml"',title:'"conf/hydra/callbacks/my_callback.yaml"'},"# @package _global_\nhydra:\n  callbacks:\n    my_callback:\n      _target_: my_app.MyCallback\n      bucket: my_s3_bucket\n      file_path: ./test.pt\n")))),Object(o.b)("h3",{id:"callback-ordering"},"Callback ordering"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"on_run_start")," or ",Object(o.b)("inlineCode",{parentName:"p"},"on_multirun_start")," method will get called first,\nfollowed by ",Object(o.b)("inlineCode",{parentName:"p"},"on_job_start")," (called once for each job).\nAfter each job ",Object(o.b)("inlineCode",{parentName:"p"},"on_job_end")," is called, and finally either ",Object(o.b)("inlineCode",{parentName:"p"},"on_run_end")," or\n",Object(o.b)("inlineCode",{parentName:"p"},"on_multirun_end")," is called one time before the application exits."),Object(o.b)("p",null,"In the ",Object(o.b)("inlineCode",{parentName:"p"},"hydra.callbacks")," section of your config, you can use a list to register multiple callbacks. They will be called in the final composed order for ",Object(o.b)("inlineCode",{parentName:"p"},"start")," events and\nin reversed order for ",Object(o.b)("inlineCode",{parentName:"p"},"end")," events. So, for example, suppose we have the following composed config:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-commandline",metastring:'title="python my_app.py --cfg hydra -p hydra.callbacks"',title:'"python',"my_app.py":!0,"--cfg":!0,hydra:!0,"-p":!0,'hydra.callbacks"':!0},"# @package hydra.callbacks\nmy_callback1:\n  _target_: my_app.MyCallback1\n  param1: val1\nmy_callback2:\n  _target_: my_app.MyCallback2\n  param2: val2\n")),Object(o.b)("p",null,"Before each job starts, ",Object(o.b)("inlineCode",{parentName:"p"},"MyCallback1.on_job_start")," will get called first,\nfollowed by ",Object(o.b)("inlineCode",{parentName:"p"},"MyCallback2.on_job_start"),".\nAfter each job ends, ",Object(o.b)("inlineCode",{parentName:"p"},"MyCallback2.on_job_end")," will get called first,\nfollowed by ",Object(o.b)("inlineCode",{parentName:"p"},"MyCallback1.on_job_end"),"."))}b.isMDXComponent=!0}}]);