<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hydra.cc/blog</id>
    <title>Hydra Blog</title>
    <updated>2021-06-13T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hydra.cc/blog"/>
    <subtitle>Hydra Blog</subtitle>
    <icon>https://hydra.cc/img/Hydra-head.svg</icon>
    <entry>
        <title type="html"><![CDATA[Hydra 1.1]]></title>
        <id>/2021/06/13/Hydra_1.1</id>
        <link href="https://hydra.cc/blog/2021/06/13/Hydra_1.1"/>
        <updated>2021-06-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After many months and a lot of hard work by many people, Hydra 1.1 is finally out!]]></summary>
        <content type="html"><![CDATA[<p align="center"><img src="/img/Hydra-Readme-logo2.svg" alt="logo" width="70%"/></p><p>After many months and a lot of hard work by many people, Hydra 1.1 is finally out!<br/>
<!-- -->Hydra 1.1 comes with OmegaConf 2.1, which has its own share of awesome new features.</p><p>This blog post highlights some of the most prominent features, check the release notes for a complete list of changes:</p><ul><li>Hydra 1.1 <a href="https://github.com/facebookresearch/hydra/releases/tag/v1.1.0">release notes</a></li><li>OmegaConf 2.1 <a href="https://github.com/omry/omegaconf/releases/tag/v2.1.0">release notes</a></li></ul><h3>Major new features in Hydra 1.1</h3><ul><li>More powerful config composition<ul><li>Every config can now have a Defaults List</li><li>Composition order of current config can be controlled via the <code>_self_</code> keyword in the Defaults List</li><li>Support for composing multiple configs from the same config group</li><li>Support for configuring the config search path from the primary config</li></ul></li><li>Recursive instantiation</li><li>Experimental callbacks support</li><li>OmegaConf 2.1:<ul><li>Relative interpolations</li><li>New OmegaConf interpolation grammar supporting nested interpolations and much more</li><li>More powerful custom resolvers</li></ul></li></ul><h3>More powerful config composition</h3><p>Config composition is the key area of improvement in Hydra 1.1.<br/>
<!-- -->The biggest change is support for a Defaults List in any config, and not just the primary config.</p><p>This enables many new capabilities:</p><ul><li>Any config can now &quot;extend&quot; other configs. This enables config files to be associated with a Structured Config schema and to extend other config files</li><li>A top level &quot;experiment config&quot; can now override the Defaults List as well as config values</li><li>Complex frameworks can now have their own Defaults List, reducing boilerplate</li></ul><p>Other related changes include the ability to change the order a config is composed relative to config in its Defaults List by
adding <code>_self_</code> to the Defaults List and the ability to use multiple configs from the same config group.</p><p>Learn more:</p><ul><li><a href="/docs/advanced/defaults_list">The Defaults List</a></li><li><a href="/docs/patterns/extending_configs">Extending configs</a></li><li><a href="/docs/tutorials/structured_config/schema">Structured Configs Schema</a></li><li><a href="/docs/patterns/configuring_experiments">Configuring Experiments</a></li><li><a href="/docs/patterns/select_multiple_configs_from_config_group">Select multiple configs from config group</a></li></ul><h3>Object instantiation enhancements</h3><p><code>hydra.utils.instantiate()</code> now instantiates nested objects recursively.</p><p>Other enhancements include:</p><ul><li>Support for positional arguments via the <code>_args_</code> config key</li><li>Support for parameter conversion strategy was added via the <code>_convert_</code> config key</li></ul><p>Learn more <a href="/docs/advanced/instantiate_objects/overview">here</a>.</p><h3>Hydra callbacks</h3><p>A new experimental mechanism for user defined callbacks was added.
Callbacks enable user code to be executed automatically at various points in the lifecycle of your application.
There are many potential use cases for this, for example automatic registration with your
favorite experiment-tracking service.</p><p>Learn more <a href="/docs/experimental/callbacks">here</a>.</p><h3>OmegaConf 2.1 highlights</h3><p>OmegaConf 2.1 includes many enhancements, bug fixes, and performance improvements.</p><h4>Relative interpolations</h4><p>Relative interpolations enable accessing a config node relative to the node defining the interpolation:</p><pre><code class="language-yaml">x: 10
b:
  y: 20
  a: {x}    # 10, absolute interpolation
  b: ${.y}  # 20, relative interpolation
  c: ${..x} # 10, relative interpolation
</code></pre><h4>Nested interpolations</h4><p>OmegaConf 2.1 adds a new interpolation grammar supporting more sophisticated usage of interpolations.<br/>
<!-- -->In the following example, the default value to use if the environment variable <code>DB_USER</code> does not exist is defined in the <code>default_user</code> config node:  </p><pre><code class="language-yaml">default_user: root
db_user: ${oc.env:DB_USER,${default_user}}
</code></pre><h4>More powerful custom resolvers</h4><p>OmegaConf custom resolvers can now access parent config node or the config root by defining
keyword parameters named <code>_parent_</code> and <code>_root_</code>.</p><p>In the example below, we use <code>_parent_</code> to implement a sum function that defaults to 0 if the node does not exist:</p><pre><code class="language-python">def sum(a, b, *, _parent_):
  return _parent_.get(a, 0) + _parent_.get(b, 0)

OmegaConf.register_new_resolver(&quot;sum&quot;, sum)
cfg = OmegaConf.create({
  &quot;node&quot;: {
    &quot;a&quot;: 1,
    &quot;b&quot;: 2,
    &quot;a_plus_b&quot;: &quot;${sum:a,b}&quot;,
    &quot;a_plus_z&quot;: &quot;${sum:a,z}&quot;,
  },
})
print(cfg.node.a_plus_b)  # 3
print(cfg.node.a_plus_z)  # 1
</code></pre><h3>Other notable improvements</h3><ul><li>Config composition, especially for large configs - is significantly faster.</li><li><code>OmegaConf.resolve(cfg)</code> can be used for in-place interpolation resolution on a config object</li><li>Improved compatibility of OmegaConf config objects with plain dict and list</li><li>Support for bracketed style (<code>foo.bar</code> is equivalent to <code>foo[bar]</code>), this covers interpolations and <code>OmegaConf.{update, select}</code> usage</li><li>PyDev.Debugger integration for easier debugging of config objects in PyCharm and VSCode</li></ul><h3>Migrating from 1.0</h3><p>Hydra 1.1 is a major release. For most people, migrating from 1.0 to 1.1 will be smooth.
However, there are some breaking changes listed in the release notes of OmegaConf 2.1 and Hydra 1.1.
Most changes come with a deprecation warning pointing to a specific migration guide page.
Please feel free to reach out for <a href="/docs/intro#community">help</a> if you see a change in behavior that is not mentioned in the release notes.</p><p>That&#x27;s it for now, take Hydra 1.1 for a spin!</p>]]></content>
        <author>
            <name>Omry Yadan</name>
            <uri>https://github.com/omry</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hydra Ray Launcher]]></title>
        <id>/2020/12/22/Hydra_Ray_Launcher</id>
        <link href="https://hydra.cc/blog/2020/12/22/Hydra_Ray_Launcher"/>
        <updated>2020-12-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are happy to announce that we are adding a Ray Launcher to the Hydra Launchers family.]]></summary>
        <content type="html"><![CDATA[<p>We are happy to announce that we are adding a <a href="https://hydra.cc/docs/plugins/ray_launcher">Ray Launcher</a> to the Hydra Launchers family.
Hydra&#x27;s Launcher plugins enable launching to different environments without changing your existing workflows or application code.
The Hydra Ray Launcher can be used to launch your application to a new or existing <a href="https://docs.ray.io/en/master/cluster/launcher.html">Ray cluster</a>,
locally or on AWS. In this post we demonstrate the major functionalities of the Launcher.
For more details on installation and configuration, please check out the <a href="https://hydra.cc/docs/plugins/ray_launcher/">Hydra Ray Launcher documentation</a>.
As always, please <a href="https://github.com/facebookresearch/hydra#community">join our community</a> and give us feedback!</p><p><a href="https://github.com/ray-project/ray">Ray</a> is a simple yet powerful Python library for parallel and distributed programming. Among the many features it provides, Ray comes with a
<a href="https://docs.ray.io/en/master/cluster/launcher.html#ref-automatic-cluster">cluster launcher</a> that can be used to provision resources and start a Ray cluster on top of them.
Hydra Ray Launcher is built on top of the <a href="https://docs.ray.io/en/master/ray-overview/index.html#parallelizing-python-java-functions-with-ray-tasks">Ray Tasks API</a> and the Ray cluster launcher. </p><h3>Launching to a new or existing AWS cluster</h3><p>Hydra Ray Launcher simplifies your experience by allowing the Ray cluster setup to be
configured transparently by Hydra (eliminating the need for an external YAML file while maintaining
the flexibility). Hydra Ray Launcher comes with reasonable default configurations which can be found
<a href="https://hydra.cc/docs/plugins/ray_launcher/#ray_aws-launcher">here</a> (under the heading, “Discover ray_aws launcher&#x27;s config”). You can override them in your application
config or from the command line to fit your use case.
The following Ray Launcher example code (e.g., my_app.py) is runnable and can be found <a href="https://github.com/facebookresearch/hydra/tree/master/plugins/hydra_ray_launcher/examples/simple">here</a>. </p><p>Launch your Hydra application to AWS by simply overriding: <code>hydra/launcher=ray_aws</code>:</p><pre><code class="language-commandline">$ python my_app.py hydra/launcher=ray_aws task=1,2 --multirun
[HYDRA] Ray Launcher is launching 2 jobs, 
[HYDRA]        #0 : task=1
[HYDRA]        #1 : task=2
...
[HYDRA] Running command: [&#x27;ray&#x27;, &#x27;up&#x27;, &#x27;-y&#x27;, &#x27;/var/folders/n_/9qzct77j68j6n9lh0lw3vjqcn96zxl/T/tmp20qvoy15.yaml&#x27;]
[HYDRA] Output: INFO services.py:1090 -- View the Ray dashboard at http://127.0.0.1:8265
(pid=3823)[__main__][INFO] - Executing task 1
(pid=3822)[__main__][INFO] - Executing task 2
[HYDRA] Stopping cluster now. (stop_cluster=true)
[HYDRA] Deleted the cluster (provider.cache_stopped_nodes=false)
[HYDRA] Running command: [&#x27;ray&#x27;, &#x27;down&#x27;, &#x27;-y&#x27;, &#x27;/var/folders/n_/9qzct77j68j6n9lh0lw3vjqcn96zxl/T/tmpfm2ems9v.yaml&#x27;]
</code></pre><h3>Launching to a new local Ray Cluster</h3><p>If you want to do a quick local test,
you can spin up a local Ray cluster at application run time by specifying <code>hydra/launcher=ray</code>.
In this example, we create a new Ray cluster at application time. </p><pre><code class="language-commandline">$ python my_app.py  --multirun hydra/launcher=ray 
[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-12-17/16-11-28
[HYDRA] Initializing ray with config: {&#x27;address&#x27;: None}
2020-12-17 16:11:29,340 INFO services.py:1090 -- View the Ray dashboard at http://127.0.0.1:8265
[HYDRA]        #0 : 
(pid=62642) [__main__][INFO] - Executing task 1
</code></pre><h3>Launching to an existing local Ray Cluster</h3><p>You can launch the application on an existing local Ray cluster by configuring the cluster address
and overriding <code>hydra/launcher=ray</code>. In the following example we configure the Ray cluster address
to local ray cluster and Hydra Ray Launcher was able to connect to the existing Ray cluster and
execute the application code:</p><pre><code class="language-commandline">$ python my_app.py  --multirun hydra/launcher=ray hydra.launcher.ray.init.address=localhost:6379
[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-11-10/15-13-32
[HYDRA] Initializing ray with config: {&#x27;num_cpus&#x27;: None, &#x27;num_gpus&#x27;: None, &#x27;address&#x27;: &#x27;localhost:6379&#x27;}
INFO worker.py:633 -- Connecting to existing Ray cluster at address: 10.30.99.17:6379
[HYDRA]        #0 :
(pid=93358) [__main__][INFO] - Executing task 1
</code></pre><p>Hydra Ray Launcher is built on top of Hydra 1.0 and you have access to all of the benefits Hydra brings:</p><h3>Parameter sweeps and optimization</h3><p>Hyperparameter sweeps are common in machine learning research.
Hydra has built-in grid search and provides several Sweeper plugins for hyperparameter optimization.
Sweepers can be used together with Launchers for sweeping on different computing platforms.
Start from our documentation <a href="https://hydra.cc/docs/tutorials/basic/running_your_app/multi-run/">here</a> to find more.</p><h3>Config type safety</h3><p>Modern Hydra applications and Hydra Plugins leverage Structured Configs for config validation,
and Hydra Ray Launcher is no exception. In the following example, we try to override the Ray cluster’s
autoscaling mode with an illegal value:</p><pre><code class="language-commandline">$ python my_app.py --multirun hydra.launcher.ray.cluster.autoscaling_mode=foo
Error merging override hydra.launcher.ray.cluster.autoscaling_mode=foo
Invalid value &#x27;foo&#x27;, expected one of [default, aggressive]
        full_key: hydra.launcher.ray.cluster.autoscaling_mode
        reference_type=RayClusterConf
        object_type=RayClusterConf

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
</code></pre><p>That’s it for now! Please try out the new Hydra Ray Launcher and let us know what you think.
We are always happy to connect with you via <a href="https://github.com/facebookresearch/hydra">GitHub</a> or the <a href="https://hydra-framework.zulipchat.com/">Hydra Chat</a>.</p>]]></content>
        <author>
            <name>Jieru Hu</name>
            <uri>https://github.com/jieru-hu</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hydra 1.0]]></title>
        <id>/2020/09/03/Hydra_1.0</id>
        <link href="https://hydra.cc/blog/2020/09/03/Hydra_1.0"/>
        <updated>2020-09-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After many months and a lot of hard work by many people, Hydra 1.0 is finally out!]]></summary>
        <content type="html"><![CDATA[<p align="center"><img src="/img/Hydra-Readme-logo2.svg" alt="logo" width="70%"/></p><p>After many months and a lot of hard work by many people, Hydra 1.0 is finally out!<br/>
<!-- -->Despite some very big changes, this is still the Hydra you love - only bigger, stronger and with more heads.</p><h2>Major new features in Hydra 1.0</h2><ul><li>Config type safety via Structured Configs</li><li>More powerful command line</li><li>New plugins enabling remote launching and hyper parameter optimization</li><li>Improved error reporting</li><li>Reduce nesting levels with config packages</li></ul><h2>Config type safety via Structured Configs</h2><p>Structured Configs is a powerful new feature that enables strongly typed configs that can be validated both statically and at runtime.
With Structured Configs, you use Python dataclasses to describe your configuration structure and types.
They can be used as an alternative to YAML files, or as a way to validate YAML files automatically.</p><details><summary>See example (Click to expand)</summary><p>This example is using a Structured Config as an alternative to a configuration file.</p><pre><code class="language-python">@dataclass
class MySQLConfig:
    host: str = &quot;localhost&quot;
    port: int = 3306

cs = ConfigStore.instance()
cs.store(name=&quot;config&quot;, node=MySQLConfig)

@hydra.main(config_name=&quot;config&quot;)
def my_app(cfg: MySQLConfig) -&gt; None:
    if cfg.pork == 80: # pork should be port!
        print(&quot;Is this a webserver?!&quot;)
</code></pre><p>Duck-typing the config object as <code>MySQLConfig</code> enables static type checkers like <code>mypy</code> to catch
type errors before you run your code:</p><pre><code class="language-text" metastring="title=&quot;$ mypy my_app.py&quot;" title="&quot;$">my_app.py:22: error: &quot;MySQLConfig&quot; has no attribute &quot;pork&quot;
Found 1 error in 1 file (checked 1 source file)
</code></pre><p>Hydra will catch typos, or type errors in the command line:</p><pre><code>$ python my_app.py port=fail
Error merging override port=fail
Value &#x27;fail&#x27; could not be converted to Integer
        full_key: port
        reference_type=Optional[MySQLConfig]
        object_type=MySQLConfig
</code></pre></details><br/><p>Learn more at the <a href="/docs/tutorials/structured_config/intro">Structured Configs tutorial</a>.</p><h2>More powerful command line</h2><p>Hydra 1.0 introduces a new command line with many new capabilities, such as:</p><ul><li>Override, Add or Delete config values or Default list choices</li><li>Cast values to coerce their type</li><li>Specify dictionaries and lists as values</li></ul><details><summary>See examples</summary><div class="row"><div class="col col--6"><pre><code class="language-text">Override as usual



</code></pre><pre><code class="language-text">Prefix with + to add a new field to
the config



</code></pre><pre><code class="language-text">Prefix with ~ to delete a field from
the config

</code></pre><pre><code class="language-text">Cast values to coerce their type.



</code></pre><pre><code class="language-text">Support for dictionaries and lists







</code></pre></div><div class="col  col--6"><pre><code class="language-yaml">$ python my_app.py db.user=root
db:
  user: root
  pass: secret
</code></pre><pre><code class="language-yaml">$ python my_app.py +db.timeout=10
db:
  user: omry
  pass: secret
  timeout: 10
</code></pre><pre><code class="language-yaml">$ python my_app.py &#x27;~db.pass&#x27;
db:
  user: omry
</code></pre><pre><code class="language-yaml">$ python my_app.py &#x27;db.pass=str(42)&#x27;
db:
  user: omry
  pass: &#x27;42&#x27;
</code></pre><pre><code class="language-yaml">$ python my_app.py \
  &#x27;+db.params={a:10,b:20}&#x27;
db:
  user: omry
  pass: secret
  params:
    a: 10
    b: 20
</code></pre></div></div></details><br/><p>Learn more at the <a href="/docs/advanced/override_grammar/basic">Basic Override syntax page</a>. </p><h2>Sweeper improvements</h2><p>Advanced command line capabilities are making Hydra&#x27;s Basic Sweeper more powerful.</p><ul><li>Specify numeric ranges via the command line</li><li>Use glob to select multiple config group options without specifying them explicitly</li><li>Control sweeping order with sort and shuffle</li></ul><details><summary>See examples</summary><div class="row"><div class="col col--6"><pre><code class="language-text">Use glob to easily select
multiple config group options
</code></pre><pre><code class="language-text">Use range to specify a range of 
numbers


</code></pre><pre><code class="language-text">You can sort sweep to run order






</code></pre><pre><code class="language-text">You can also shuffle sweeps to run
in random order

</code></pre></div><div class="col  col--6"><pre><code class="language-python">$ python my_app.py -m &#x27;db=glob(*)&#x27;
# Will sweep over all db options
</code></pre><pre><code class="language-python">$ python my_app.py --multirun \
  &#x27;+number=range(1,4)&#x27;
# number will take the values
# 1,2 and 3 
</code></pre><pre><code class="language-python">$ python my_app.py --multirun \
  &#x27;+num=sort(3,1,2)&#x27;
# Sweep over num in order

$ python my_app.py --multirun \
  &#x27;+num=sort(3,1,2,reverse=true)&#x27;
# Sweep over num in reverse order
</code></pre><pre><code class="language-python">$ python my_app.py --multirun \
  &#x27;+num=shuffle(3,1,2)&#x27;
# Sweep over num in random order
</code></pre></div></div></details><br/><p>Learn more at the <a href="/docs/advanced/override_grammar/extended">Extended Override grammar</a> page.</p><h2>New plugins</h2><h3>Launchers</h3><p>One of the early promises of Hydra was that it will enable you to easily launch your application to different clusters.
Hydra 1.0 adds a few Launchers plugins that starts to make good on that promise.</p><ul><li>The <a href="/docs/plugins/submitit_launcher">Submitit Launcher</a> can launch applications to <a href="https://slurm.schedmd.com/documentation.html">SLURM</a> cluster using <a href="https://github.com/facebookincubator/submitit">Submitit</a>.  </li><li>The <a href="/docs/plugins/rq_launcher">Redis Queue launcher</a> can launch applications to Redis Queue server.  </li><li>The <a href="/docs/plugins/joblib_launcher">Joblib Launcher</a> can launch your application with joblib, enabling parallel local execution.</li></ul><h3>Sweepers</h3><p>Two new Sweeper plugins enables you to automatically find optimal parameters without changing a line of code.</p><ul><li>The <a href="/docs/plugins/ax_sweeper">Ax Sweeper</a> brings the power of <a href="https://ax.dev">Ax</a> to your Hydra app </li><li>The <a href="/docs/plugins/nevergrad_sweeper">Nevergrad Sweeper</a> brings the power of <a href="https://facebookresearch.github.io/nevergrad/">Nevergrad</a> to your Hydra app </li></ul><p>Note that both Sweepers are still in beta and some changes are expected soon. Your feedback can help shape them.</p><h3>Tab completion</h3><p>In addition to Bash, Hydra now supports <a href="https://fishshell.com/">Fish</a> shell Tab Completion.</p><h2>Compose API improvements</h2><p>The experimental Compose API is maturing. It is now possible to initialize Hydra in one of 3 ways:</p><ul><li><code>initialize()</code>: Initialize with a config path relative to the caller</li><li><code>initialize_config_module()</code> : Initialize with config_module (absolute)</li><li><code>initialize_config_dir()</code> : Initialize with a config_dir on the file system (absolute)</li></ul><p>All initialization methods can be used to initialize Hydra globally or in a context. Making the Compose API ideal for
Unit tests and Jupyter notebooks.</p><p>Learn more at the <a href="/docs/1.0/experimental/compose_api">Compose API</a> page.</p><h2>Improved error reporting</h2><p>Reported errors will have un-interesting stack frames removed by default.
You can enable the complete stack trace with the environment variable <code>HYDRA_FULL_ERROR=1</code>.</p><details><summary>See example of an error</summary><pre><code class="language-python">@hydra.main()
def my_app(cfg: DictConfig) -&gt; None:
    1 / 0 # hmmm, seems fishy

if __name__ == &quot;__main__&quot;:
    my_app()
</code></pre><pre><code class="language-python">$ python my_app.py
Traceback (most recent call last):
  File &quot;my_app.py&quot;, line 9, in my_app
    1 / 0
ZeroDivisionError: division by zero

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
</code></pre></details><br/><details><summary>See example of a complete stack trace</summary><pre><code class="language-python">$ HYDRA_FULL_ERROR=1 python my_app.py
Traceback (most recent call last):
  File &quot;my_app.py&quot;, line 13, in &lt;module&gt;
    my_app()
  File &quot;/home/omry/dev/hydra/hydra/main.py&quot;, line 32, in decorated_main
    _run_hydra(
  File &quot;/home/omry/dev/hydra/hydra/_internal/utils.py&quot;, line 355, in _run_hydra
    run_and_report(
  File &quot;/home/omry/dev/hydra/hydra/_internal/utils.py&quot;, line 210, in run_and_report
    raise ex
  File &quot;/home/omry/dev/hydra/hydra/_internal/utils.py&quot;, line 207, in run_and_report
    return func()
  File &quot;/home/omry/dev/hydra/hydra/_internal/utils.py&quot;, line 356, in &lt;lambda&gt;
    lambda: hydra.run(
  File &quot;/home/omry/dev/hydra/hydra/_internal/hydra.py&quot;, line 107, in run
    return run_job(
  File &quot;/home/omry/dev/hydra/hydra/core/utils.py&quot;, line 125, in run_job
    ret.return_value = task_function(task_cfg)
  File &quot;my_app.py&quot;, line 9, in my_app
    1 / 0
ZeroDivisionError: division by zero
</code></pre></details><h2>Reduce nesting levels with config packages</h2><p>Hydra 1.0 introduces the ability to specify the root <code>config package</code> in the config file.
Specifying the root config package help reducing nesting levels in config files.
Config packages can be overridden via the Defaults List or the command line, allowing the reuse of the the same
config in multiple place in the resulting output without having to duplicate it.</p><details><summary>See example of reduced nesting</summary><p>The following two <code>db/mysql.yaml</code> files are equivalent:</p><div class="row"><div class="col col--6"><pre><code class="language-yaml" metastring="title=&quot;Hydra 0.11&quot;" title="&quot;Hydra">db:
  host: localhost
  port: 3306
</code></pre></div><div class="col  col--6"><pre><code class="language-yaml" metastring="title=&quot;Hydra 1.0&quot;" title="&quot;Hydra"># @package _group_
host: localhost
port: 3306
</code></pre></div></div></details><details><summary>See example of config reuse</summary>Add the `mysql` config in the packages `db.src` and `db.dst`, reusing `db/mysql.yaml`. <div class="row"><div class="col col--6"><pre><code class="language-yaml" metastring="title=&quot;config.yaml&quot;" title="&quot;config.yaml&quot;">defaults:
 - db@db.src: mysql
 - db@db.dst: mysql




</code></pre></div><div class="col  col--6"><pre><code class="language-yaml" metastring="title=&quot;Interpretation&quot;" title="&quot;Interpretation&quot;">db:
  src:
    host: localhost
    port: 3306
  dst:
    host: localhost
    port: 3306
</code></pre></div></div></details><br/><p>Learn more at the <a href="/docs/advanced/overriding_packages">Overriding packages</a> page.</p><h2>Misc improvements</h2><ul><li>The <code>params</code> field is eliminated from instantiated objects configs (<a href="/docs/upgrades/0.11_to_1.0/object_instantiation_changes">details</a>)</li><li>Support for setting environment variables via the config. (<code>hydra.job.env_set</code>) (<a href="/docs/configure_hydra/job#hydrajobenv_set">details</a>)</li><li>Hydra&#x27;s config can now be accessed through interpolation using <code>${hydra:key}</code>, for example <code>${hydra:job.name}</code> (<a href="/docs/configure_hydra/intro#runtime-variables">details</a>)</li><li>Introduced <code>--info</code> flag for quick access to debug information (<a href="/docs/tutorials/basic/running_your_app/debugging#info">details</a>)</li><li>Add <code>--package</code> flag, can be used with <code>--cfg</code> to print a specific config package (<a href="/docs/advanced/hydra-command-line-flags#--package-p">details</a>)</li><li>Override the <code>config_path</code> and <code>config_name</code> from the command line with <code>--config-name</code> and <code>--config-path</code> (<a href="/docs/advanced/hydra-command-line-flags#--config-path-cp">details</a>)</li><li>Add an additional config directory to the search path with <code>--config-dir</code> (<a href="/docs/advanced/hydra-command-line-flags#--config-dir-cd">details</a>)</li></ul><h2>Migrating from 0.11</h2><p>For most people, migrating from 0.11 to 1.0 will be smooth.
However, you will have issues if you are relying on Python 2 support or have used internal APIs.</p><ul><li>Hydra 1.0 drops support for <a href="https://www.python.org/doc/sunset-python-2/">Python 2</a>.</li><li>If you are relying on internal APIs, Hydra 1.0 will likely break your code. Maintaining backward compatibility for internal APIs is not a goal.</li><li>Hydra 0.11 Configs pickled and stored will not unpickle with Hydra 1.0 due to internal changes in OmegaConf.</li></ul><p>There are multiple new deprecation warnings, each with a link to mini migration guide.</p><p>That&#x27;s it for now, take Hydra 1.0 for a spin!</p>]]></content>
        <author>
            <name>Omry Yadan</name>
            <uri>https://github.com/omry</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[New Hydra blog]]></title>
        <id>/2020/05/04/New-blog</id>
        <link href="https://hydra.cc/blog/2020/05/04/New-blog"/>
        <updated>2020-05-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome to the Hydra blog.]]></summary>
        <content type="html"><![CDATA[<p>Welcome to the Hydra blog.</p><p>Catching up on some previous content:</p><h5>Apr/8/2020</h5><p><a href="https://twit.tv/shows/floss-weekly/episodes/573">FLOSS Weekly interview</a></p><h5>Feb/3/2020</h5><p><a href="http://bit.ly/2Sdq2B3">PyTorch Medium channel blog post</a></p><h5>Oct/3/2019</h5><p><a href="https://engineering.fb.com/open-source/hydra/">Facebook engineering blog release post</a></p>]]></content>
        <author>
            <name>Omry Yadan</name>
            <uri>https://github.com/omry</uri>
        </author>
    </entry>
</feed>